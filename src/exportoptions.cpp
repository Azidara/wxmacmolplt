/////////////////////////////////////////////////////////////////////////////
// Name:        exportoptions.cpp
// Purpose:     
// Author:      Brett Bode
// Modified by: 
// Created:     Thu 11 May 2006 02:22:56 PM CDT
// RCS-ID:      
// Copyright:   (c) 2006 Iowa State University
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Thu 11 May 2006 02:22:56 PM CDT

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "exportoptions.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "exportoptions.h"

////@begin XPM images
////@end XPM images

/*!
 * ExportOptions type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ExportOptions, wxDialog )

/*!
 * ExportOptions event table definition
 */

BEGIN_EVENT_TABLE( ExportOptions, wxDialog )

////@begin ExportOptions event table entries
    EVT_CHOICE( ID_FILE_TYPE_CHOICE, ExportOptions::OnFileTypeChoiceSelected )

    EVT_RADIOBUTTON( ID_SCREEN_RES_RADIOBUTTON, ExportOptions::OnScreenResRadiobuttonSelected )

    EVT_RADIOBUTTON( ID_CUSTOM_RES_RADIOBUTTON, ExportOptions::OnCustomResRadiobuttonSelected )

    EVT_BUTTON( wxID_OK, ExportOptions::OnOkClick )

    EVT_BUTTON( wxID_CANCEL, ExportOptions::OnCancelClick )

////@end ExportOptions event table entries

END_EVENT_TABLE()

/*!
 * ExportOptions constructors
 */

ExportOptions::ExportOptions( )
{
}

ExportOptions::ExportOptions( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}

/*!
 * ExportOptions creator
 */

bool ExportOptions::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ExportOptions member initialisation
////@end ExportOptions member initialisation

////@begin ExportOptions creation
    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end ExportOptions creation
    return true;
}

/*!
 * Control creation for ExportOptions
 */

void ExportOptions::CreateControls()
{    
////@begin ExportOptions content construction
    // Generated by DialogBlocks, Thu 11 May 2006 02:33:28 PM CDT (unregistered)

    ExportOptions* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("File Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    wxString itemChoice5Strings[] = {
        _("Windows Bitmap (*.bmp)"),
        _("Portable Network Graphics (*.png)"),
        _("JPEG (*.jpeg)")
    };
    wxChoice* itemChoice5 = new wxChoice( itemDialog1, ID_FILE_TYPE_CHOICE, wxDefaultPosition, wxDefaultSize, 3, itemChoice5Strings, 0 );
    itemBoxSizer3->Add(itemChoice5, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Options"));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer6, 0, wxGROW|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer7Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Dimensions"));
    wxStaticBoxSizer* itemStaticBoxSizer7 = new wxStaticBoxSizer(itemStaticBoxSizer7Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer7, 0, wxGROW|wxALL, 5);

    wxRadioButton* itemRadioButton8 = new wxRadioButton( itemDialog1, ID_SCREEN_RES_RADIOBUTTON, _("Screen Resolution"), wxDefaultPosition, wxDefaultSize, wxRB_SINGLE );
    itemRadioButton8->SetValue(true);
    itemStaticBoxSizer7->Add(itemRadioButton8, 0, wxALIGN_LEFT|wxALL, 5);

    wxString itemChoice9Strings[] = {
        _("72dpi (Screen)"),
        _("300dpi")
    };
    wxChoice* itemChoice9 = new wxChoice( itemDialog1, ID_RES_CHOICE, wxDefaultPosition, wxDefaultSize, 2, itemChoice9Strings, 0 );
    itemStaticBoxSizer7->Add(itemChoice9, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxRadioButton* itemRadioButton10 = new wxRadioButton( itemDialog1, ID_CUSTOM_RES_RADIOBUTTON, _("Custom Resolution"), wxDefaultPosition, wxDefaultSize, wxRB_SINGLE );
    itemRadioButton10->SetValue(false);
    itemStaticBoxSizer7->Add(itemRadioButton10, 0, wxALIGN_LEFT|wxALL, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxVERTICAL);
    itemStaticBoxSizer7->Add(itemBoxSizer11, 0, wxALIGN_CENTER_HORIZONTAL, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer11->Add(itemBoxSizer12, 0, wxALIGN_RIGHT, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, _("Width:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText13->Enable(false);
    itemBoxSizer12->Add(itemStaticText13, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxTextCtrl* itemTextCtrl14 = new wxTextCtrl( itemDialog1, ID_RES_WIDTH_TEXT, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemTextCtrl14->Enable(false);
    itemBoxSizer12->Add(itemTextCtrl14, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText15 = new wxStaticText( itemDialog1, wxID_STATIC, _("pixels"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText15->Enable(false);
    itemBoxSizer12->Add(itemStaticText15, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer11->Add(itemBoxSizer16, 0, wxALIGN_RIGHT, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( itemDialog1, wxID_STATIC, _("Height:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText17->Enable(false);
    itemBoxSizer16->Add(itemStaticText17, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxTextCtrl* itemTextCtrl18 = new wxTextCtrl( itemDialog1, ID_RES_HEIGHT_TEXT, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemTextCtrl18->Enable(false);
    itemBoxSizer16->Add(itemTextCtrl18, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText19 = new wxStaticText( itemDialog1, wxID_STATIC, _("pixels"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText19->Enable(false);
    itemBoxSizer16->Add(itemStaticText19, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer20 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer20, 0, wxALIGN_RIGHT|wxRIGHT|wxTOP|wxBOTTOM, 5);
    wxButton* itemButton21 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer20->AddButton(itemButton21);

    wxButton* itemButton22 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer20->AddButton(itemButton22);

    itemStdDialogButtonSizer20->Realize();

////@end ExportOptions content construction
}

/*!
 * Should we show tooltips?
 */

bool ExportOptions::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ExportOptions::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ExportOptions bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ExportOptions bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ExportOptions::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ExportOptions icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ExportOptions icon retrieval
}
/*!
 * wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FILE_TYPE_CHOICE
 */

void ExportOptions::OnFileTypeChoiceSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FILE_TYPE_CHOICE in ExportOptions.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_CHOICE_SELECTED event handler for ID_FILE_TYPE_CHOICE in ExportOptions. 
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SCREEN_RES_RADIOBUTTON
 */

void ExportOptions::OnScreenResRadiobuttonSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SCREEN_RES_RADIOBUTTON in ExportOptions.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_SCREEN_RES_RADIOBUTTON in ExportOptions. 
}


/*!
 * wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_CUSTOM_RES_RADIOBUTTON
 */

void ExportOptions::OnCustomResRadiobuttonSelected( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_CUSTOM_RES_RADIOBUTTON in ExportOptions.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_RADIOBUTTON_SELECTED event handler for ID_CUSTOM_RES_RADIOBUTTON in ExportOptions. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void ExportOptions::OnOkClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in ExportOptions.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK in ExportOptions. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL
 */

void ExportOptions::OnCancelClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in ExportOptions.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in ExportOptions. 
}


