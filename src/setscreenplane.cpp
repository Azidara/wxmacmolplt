/////////////////////////////////////////////////////////////////////////////
// Name:        setscreenplane.cpp
// Purpose:     
// Author:      Brett Bode
// Modified by: 
// Created:     Tue 11 Apr 15:33:38 2006
// RCS-ID:      
// Copyright:   (c) 2006 Iowa State University
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Tue 11 Apr 15:33:38 2006

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "setscreenplane.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "Globals.h"
#include "MyTypes.h"
#include "Math3D.h"
#include "MolDisplayWin.h"
#include "Frame.h"
////@end includes

#include "setscreenplane.h"

////@begin XPM images
////@end XPM images

/*!
 * SetScreenPlane type definition
 */

IMPLEMENT_DYNAMIC_CLASS( SetScreenPlane, wxDialog )

/*!
 * SetScreenPlane event table definition
 */

BEGIN_EVENT_TABLE( SetScreenPlane, wxDialog )

////@begin SetScreenPlane event table entries
    EVT_TEXT( ID_ATOM1, SetScreenPlane::OnAtom1Updated )

    EVT_TEXT( ID_PT1X, SetScreenPlane::OnPt1xUpdated )

    EVT_TEXT( ID_PT1Y, SetScreenPlane::OnPt1yUpdated )

    EVT_TEXT( ID_PT1Z, SetScreenPlane::OnPt1zUpdated )

    EVT_TEXT( ID_ATOM2, SetScreenPlane::OnAtom2Updated )

    EVT_TEXT( ID_PT2X, SetScreenPlane::OnPt2xUpdated )

    EVT_TEXT( ID_PT2Y, SetScreenPlane::OnPt2yUpdated )

    EVT_TEXT( ID_PT2Z, SetScreenPlane::OnPt2zUpdated )

    EVT_TEXT( ID_ATOM3, SetScreenPlane::OnAtom3Updated )

    EVT_TEXT( ID_PT3X, SetScreenPlane::OnPt3xUpdated )

    EVT_TEXT( ID_PT3Y, SetScreenPlane::OnPt3yUpdated )

    EVT_TEXT( ID_PT3Z, SetScreenPlane::OnPt3zUpdated )

    EVT_BUTTON( ID_XY, SetScreenPlane::OnXyClick )

    EVT_BUTTON( ID_YX, SetScreenPlane::OnYxClick )

    EVT_BUTTON( ID_XZ, SetScreenPlane::OnXzClick )

    EVT_BUTTON( wxID_CANCEL, SetScreenPlane::OnCancelClick )

    EVT_BUTTON( wxID_OK, SetScreenPlane::OnOkClick )

////@end SetScreenPlane event table entries

END_EVENT_TABLE()

/*!
 * SetScreenPlane constructors
 */

SetScreenPlane::SetScreenPlane( )
{
}

SetScreenPlane::SetScreenPlane( MolDisplayWin* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}

/*!
 * SetScreenPlane creator
 */

bool SetScreenPlane::Create( MolDisplayWin* p, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin SetScreenPlane member initialisation
    atom1 = -1;
    atom2 = -1;
    atom3 = -1;
    parent = p;
////@end SetScreenPlane member initialisation

////@begin SetScreenPlane creation
    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( p, id, caption, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end SetScreenPlane creation
	MoleculeData * MainData = parent->GetData();
	CPoint3D inPoint, outPoint;
	Matrix4D lRot, lInverse;
	MainData->GetRotationMatrix(lRot);
	InverseMatrix(lRot, lInverse);
	inPoint.x = inPoint.y = inPoint.z = 0.0;
	BackRotate3DPt(lInverse, inPoint, &(PlanePts[0]));
	inPoint.x = 1.0;
	BackRotate3DPt(lInverse, inPoint, &(PlanePts[1]));
	inPoint.x = 0.0;
	inPoint.y = 1.0;
	BackRotate3DPt(lInverse, inPoint, &(PlanePts[2]));
	setPlaneValues();
	
    return true;
}

/*!
 * Control creation for SetScreenPlane
 */

void SetScreenPlane::CreateControls()
{    
////@begin SetScreenPlane content construction
    // Generated by DialogBlocks, Tue 11 Apr 16:34:10 2006 (unregistered)

    SetScreenPlane* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticText* itemStaticText3 = new wxStaticText( itemDialog1, wxID_STATIC, _("Enter 3 points to define the screen plane:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    wxFlexGridSizer* itemFlexGridSizer4 = new wxFlexGridSizer(3, 6, 0, 0);
    itemBoxSizer2->Add(itemFlexGridSizer4, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, _("Atom 1"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Atom1Ctl = new wxTextCtrl( itemDialog1, ID_ATOM1, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
    itemFlexGridSizer4->Add(Atom1Ctl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, wxID_STATIC, _("or point 1"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText7, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Pt1XCtl = new wxTextCtrl( itemDialog1, ID_PT1X, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt1XCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt1YCtl = new wxTextCtrl( itemDialog1, ID_PT1Y, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt1YCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt1ZCtl = new wxTextCtrl( itemDialog1, ID_PT1Z, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt1ZCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText11 = new wxStaticText( itemDialog1, wxID_STATIC, _("Atom 2"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText11, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Atom2Ctl = new wxTextCtrl( itemDialog1, ID_ATOM2, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
    itemFlexGridSizer4->Add(Atom2Ctl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, _("or point 2"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText13, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Pt2XCtl = new wxTextCtrl( itemDialog1, ID_PT2X, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt2XCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt2YCtl = new wxTextCtrl( itemDialog1, ID_PT2Y, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt2YCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt2ZCtl = new wxTextCtrl( itemDialog1, ID_PT2Z, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt2ZCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( itemDialog1, wxID_STATIC, _("Atom 3"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText17, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Atom3Ctl = new wxTextCtrl( itemDialog1, ID_ATOM3, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
    itemFlexGridSizer4->Add(Atom3Ctl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText19 = new wxStaticText( itemDialog1, wxID_STATIC, _("or point 3"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(itemStaticText19, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);

    Pt3XCtl = new wxTextCtrl( itemDialog1, ID_PT3X, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt3XCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt3YCtl = new wxTextCtrl( itemDialog1, ID_PT3Y, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt3YCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    Pt3ZCtl = new wxTextCtrl( itemDialog1, ID_PT3Z, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer4->Add(Pt3ZCtl, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText23 = new wxStaticText( itemDialog1, wxID_STATIC, _("or choose a symbolic plane"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText23, 0, wxALIGN_CENTER_HORIZONTAL|wxALL|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer24, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton25 = new wxButton( itemDialog1, ID_XY, _("XY"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemButton25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton26 = new wxButton( itemDialog1, ID_YX, _("YX"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemButton26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton27 = new wxButton( itemDialog1, ID_XZ, _("XZ"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer24->Add(itemButton27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer28 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer28, 0, wxALIGN_RIGHT|wxALL, 5);

    wxButton* itemButton29 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer28->Add(itemButton29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton30 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer28->Add(itemButton30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end SetScreenPlane content construction
}

/*!
 * Should we show tooltips?
 */

bool SetScreenPlane::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap SetScreenPlane::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin SetScreenPlane bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end SetScreenPlane bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon SetScreenPlane::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin SetScreenPlane icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end SetScreenPlane icon retrieval
}

void SetScreenPlane::setPlaneValues(void) {
	wxString field;
	if (atom1 < 0) Atom1Ctl->Clear();
	if (atom2 < 0) Atom2Ctl->Clear();
	if (atom3 < 0) Atom3Ctl->Clear();
	
	field.Printf("%f", PlanePts[0].x);
	Pt1XCtl->SetValue(field);
	field.Printf("%f", PlanePts[0].y);
	Pt1YCtl->SetValue(field);
	field.Printf("%f", PlanePts[0].z);
	Pt1ZCtl->SetValue(field);
	field.Printf("%f", PlanePts[1].x);
	Pt2XCtl->SetValue(field);
	field.Printf("%f", PlanePts[1].y);
	Pt2YCtl->SetValue(field);
	field.Printf("%f", PlanePts[1].z);
	Pt2ZCtl->SetValue(field);
	field.Printf("%f", PlanePts[2].x);
	Pt3XCtl->SetValue(field);
	field.Printf("%f", PlanePts[2].y);
	Pt3YCtl->SetValue(field);
	field.Printf("%f", PlanePts[2].z);
	Pt3ZCtl->SetValue(field);
}
/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL
 */

void SetScreenPlane::OnCancelClick( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_CANCEL in SetScreenPlane. 
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for wxID_OK
 */

void SetScreenPlane::OnOkClick( wxCommandEvent& event )
{
	MoleculeData * MainData = parent->GetData();
	if (MainData->SetScreenPlane(PlanePts))
		parent->ResetModel(false);
	Destroy();
}


/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM1
 */

void SetScreenPlane::OnAtom1Updated( wxCommandEvent& event )
{
	if ((Atom1Ctl->GetLineLength(0)>0)&&Atom1Ctl->IsModified()) {
		wxString text = Atom1Ctl->GetValue();
		unsigned long temp;
		if (text.ToULong(&temp)) {
			MoleculeData * MainData = parent->GetData();
			Frame * lFrame = MainData->GetCurrentFramePtr();
			if (temp < lFrame->GetNumAtoms()) {
				CPoint3D tp;
				if (lFrame->GetAtomPosition(temp, tp)) {
					atom1 = temp;
					PlanePts[0] = tp;
				}
			}
		}
		if (atom1 >= 0)
			setPlaneValues();
		else
			Atom1Ctl->Clear();
	}
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1X
 */

void SetScreenPlane::OnPt1xUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1X in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1X in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Y
 */

void SetScreenPlane::OnPt1yUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Y in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Y in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Z
 */

void SetScreenPlane::OnPt1zUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Z in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT1Z in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM2
 */

void SetScreenPlane::OnAtom2Updated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM2 in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM2 in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2X
 */

void SetScreenPlane::OnPt2xUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2X in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2X in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Y
 */

void SetScreenPlane::OnPt2yUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Y in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Y in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Z
 */

void SetScreenPlane::OnPt2zUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Z in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT2Z in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM3
 */

void SetScreenPlane::OnAtom3Updated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM3 in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_ATOM3 in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3X
 */

void SetScreenPlane::OnPt3xUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3X in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3X in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Y
 */

void SetScreenPlane::OnPt3yUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Y in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Y in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Z
 */

void SetScreenPlane::OnPt3zUpdated( wxCommandEvent& event )
{
////@begin wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Z in SetScreenPlane.
    // Before editing this code, remove the block markers.
    event.Skip();
////@end wxEVT_COMMAND_TEXT_UPDATED event handler for ID_PT3Z in SetScreenPlane. 
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_XY
 */

void SetScreenPlane::OnXyClick( wxCommandEvent& event )
{
	atom1 = atom2 = atom3 = -1;
	for (int i=0; i<3; i++)
		PlanePts[i].x = PlanePts[i].y = PlanePts[i].z = 0.0;
	
	PlanePts[1].x = 1.0;
	PlanePts[2].y = 1.0;
	
	setPlaneValues();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_YX
 */

void SetScreenPlane::OnYxClick( wxCommandEvent& event )
{
	atom1 = atom2 = atom3 = -1;
	for (int i=0; i<3; i++)
		PlanePts[i].x = PlanePts[i].y = PlanePts[i].z = 0.0;
	
	PlanePts[1].y = 1.0;
	PlanePts[2].x = 1.0;
	
	setPlaneValues();
}

/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_XZ
 */

void SetScreenPlane::OnXzClick( wxCommandEvent& event )
{
	atom1 = atom2 = atom3 = -1;
	for (int i=0; i<3; i++)
		PlanePts[i].x = PlanePts[i].y = PlanePts[i].z = 0.0;
	
	PlanePts[1].x = 1.0;
	PlanePts[2].z = 1.0;
	
	setPlaneValues();
}


